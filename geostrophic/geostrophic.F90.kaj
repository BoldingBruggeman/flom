! Copyright (C) 2020 Bolding & Bruggeman

MODULE geostrophic_model
   !! Description:
   !! http://www.geo.cornell.edu/ocean/p_ocean/ppt_notes/15_GeostrophicCurrents.pdf

   USE, INTRINSIC :: ISO_FORTRAN_ENV
   use datetime_module, only: datetime, timedelta, clock, strptime
   use logging
   use field_manager
   use memory_manager
   use input_manager, only: Tinput, Sinput
   use geostrophic_domain
   use geostrophic_physics
   use geostrophic_dynamics

   IMPLICIT NONE

   PRIVATE  ! Private scope by default

!  Module constants

!  Module types and variables
   type, public :: type_geostrophic_model
      !! Geostrophic model implemeted using FLOM

      character(len=256) :: name = "geostrophic"
      TYPE(type_logging) :: logs
      TYPE(type_field_manager) :: fm
      TYPE(type_geostrophic_domain) :: domain
      TYPE(type_geostrophic_physics) :: physics
      TYPE(type_geostrophic_dynamics) :: dynamics

      contains

      procedure :: settings => geostrophic_settings
      procedure :: configure => geostrophic_configure
      procedure :: initialize => geostrophic_initialize
      procedure :: integrate => geostrophic_integrate

   end type type_geostrophic_model

CONTAINS

!---------------------------------------------------------------------------

SUBROUTINE geostrophic_settings(self)

   !! Configure all component of the model

   IMPLICIT NONE

!  Subroutine arguments
   class(type_geostrophic_model) :: self

!  Local constants
   character(len=256), parameter :: time_format='%Y-%m-%d %H:%M:%S' 

!  Local variables
   TYPE(timedelta) :: timediff
!---------------------------------------------------------------------------
   self%logs%prepend = ''
   call self%logs%info('geostrophic_settings()')
   Tinput%f = '/home/kb/source/repos/FLOM/atlantic.nc'
   Tinput%v = 't_an_monthly'
   Sinput%f = '/home/kb/source/repos/FLOM/atlantic.nc'
   Sinput%v = 's_an_monthly'
   return
END SUBROUTINE geostrophic_settings

!---------------------------------------------------------------------------

SUBROUTINE geostrophic_configure(self)
   !! Configure all components of the model

   IMPLICIT NONE

! Subroutine arguments
   class(type_geostrophic_model) :: self

! Local constants

! Local variables
   integer :: length
   integer :: imin=1,imax=480,jmin=1,jmax=460,kmin=1,kmax=57
!-----------------------------------------------------------------------------
   self%logs%prepend = ''
   call self%logs%info('geostrophic_configure()')

   call Tinput%initialize()
   call Sinput%initialize()

   call self%domain%configure(self%logs, &
                              imin=imin,imax=imax, &
                              jmin=jmin,jmax=jmax, &
                              kmin=kmin,kmax=kmax)
!                              kmin=kmin,kmax=kmax, &
!                              halo=(/0,0,0/))
   call self%domain%report(self%logs)

   ! now we can configure the field_manager
   call self%fm%register_dimension('lon',imax-imin+1,id=id_dim_lon)
   call self%fm%register_dimension('lat',jmax-jmin+1,id=id_dim_lat)
   call self%fm%register_dimension('z',kmax-kmin+1,id=id_dim_z)
   call self%fm%register_dimension('time',id=id_dim_time)
   call self%fm%initialize(prepend_by_default=(/id_dim_lon,id_dim_lat/),append_by_default=(/id_dim_time/))
#if 0
   call self%bathymetry%initialize(self%logs,self%domain%S,self%domain%domain_type)
#endif
   call self%physics%configure(self%logs,self%fm)
   call self%dynamics%configure(self%logs,self%fm)
   return
END SUBROUTINE geostrophic_configure

!---------------------------------------------------------------------------

SUBROUTINE geostrophic_initialize(self)
   !! Initialize all components of the model

   IMPLICIT NONE

!  Subroutine arguments
   class(type_geostrophic_model) :: self

! Local constants

! Local variables

!-----------------------------------------------------------------------------
   call self%logs%info('geostrophic_initialize()')

!KB   call self%domain%initialize(self%logs)
   call self%physics%initialize(self%logs,self%domain)
   call self%dynamics%initialize(self%logs,self%domain)
!KB   call self%fm%list()
   return
END SUBROUTINE geostrophic_initialize

!---------------------------------------------------------------------------

SUBROUTINE geostrophic_integrate(self)
   !! Calculate monthly  geostrophic currents and save the results

   IMPLICIT NONE

!  Subroutine arguments
   class(type_geostrophic_model) :: self

! Local constants

! Local variables
  integer :: n
  type(datetime) :: sim_time
  real(real64), target :: var(57,480,460)
  integer :: i,j,k
!-----------------------------------------------------------------------------
   call self%logs%info('geostrophic_integrate()')
!   return
   do n=1,12
      sim_time = datetime(2000, n, 15)
      Tinput%var => var; call Tinput%get(n)
      do k=1,57
         do j=1,460
            do i=1,480
               self%physics%temperature%T(i,j,k) = var(k,i,j)
            end do      
         end do      
      end do      
      Sinput%var => var; call Sinput%get(n)
      do k=1,57
         do j=1,460
            do i=1,480
               self%physics%salinity%S(i,j,k) = var(k,i,j)
            end do      
         end do      
      end do      

      call self%physics%temperature%update()
      call self%physics%salinity%update()
      call self%physics%density%calculate(self%physics%salinity%S, &
                                          self%physics%temperature%T )
      call self%physics%density%buoyancy()
      write(*,*) 'T(300,420,1)= ',self%physics%temperature%T(300,420,1)
      write(*,*) 'S(300,420,1)= ',self%physics%salinity%S(300,420,1)
!      write(*,*) 'rho(200,200,1)= ',self%physics%density%rho(200,200,1)
!      write(*,*) 'buoy(200,200,1)= ',self%physics%density%buoy(200,200,1)
      call self%dynamics%pressure%internal()
      call self%dynamics%currents%update(self%physics%density%rho, &
                                         self%dynamics%pressure%idpdx, &
                                         self%dynamics%pressure%idpdy)
      call self%logs%info(sim_time % strftime('%Y-%m-%d'),level=2)
   end do
   call self%logs%info('integration done',level=1)
   call self%logs%info('geostrophic model finished normally')

   return
END SUBROUTINE geostrophic_integrate

!---------------------------------------------------------------------------

END MODULE geostrophic_model

